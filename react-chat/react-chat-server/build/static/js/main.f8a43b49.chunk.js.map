{"version":3,"sources":["Nav.jsx","Login.jsx","services.js","ChatUserList.jsx","ChatMessageList.jsx","ChatOutgoing.jsx","ShowStuff.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Nav","user","onLogout","isLoggedIn","className","href","onClick","Login","onLogin","useState","username","setUsername","isDisabled","setIsDisabled","isPending","setIsPending","status","setStatus","disabled","onChange","e","target","value","fetch","method","headers","Headers","body","JSON","stringify","catch","Promise","reject","error","then","response","ok","json","fetchCreateSession","userinfo","err","ChatUserList","userList","class","Object","values","map","ChatMessageList","messageList","message","sender","text","timestamp","ChatOutgoing","renderChat","setMessageList","setText","isGreyedout","setisGreyedout","isLoading","setisLoading","statusmsg","setstatusmsg","fetchSendMessage","chatList","ShowStuff","setUserList","useEffect","intervalId","setInterval","clearInterval","usercontent","messagecontent","outgoingcontent","App","content","userState","setUserState","userName","setUserName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8a43b49.chunk.js","sourcesContent":["const Nav = function({ user, onLogout }) {\r\n  if(!user.isLoggedIn) {\r\n    return null;\r\n  }\r\n  return (\r\n    <nav>\r\n      <ul className=\"nav\">\r\n        <li className=\"logout\"><a href=\"#logout\" onClick={onLogout}>Logout</a></li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import { useState } from 'react';\r\nimport { fetchCreateSession } from './services';\r\n\r\nconst Login = function({ onLogin }) {\r\n  const[username,setUsername] = useState('');\r\n  const[isDisabled,setIsDisabled]= useState(true);\r\n  const [isPending, setIsPending] = useState(false);\r\n  const [status, setStatus] = useState('');\r\n\r\n  const onChange = (e) => {\r\n    setUsername(e.target.value);\r\n    setIsDisabled(!e.target.value);\r\n  };\r\n\r\n  const login = () => {\r\n    setIsPending(true);\r\n    fetchCreateSession({ username })\r\n    .then( userinfo => {\r\n      setStatus('');\r\n      setIsPending(false);\r\n      onLogin({ username});\r\n    })\r\n    .catch( err => {\r\n      setStatus(err.error);\r\n      setIsPending(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n  <div>\r\n    { status && <div className =\"status\">{status}</div>}\r\n    <div className = \"login-form\">\r\n    <label>\r\n      Username:\r\n      <input disabled = {isPending} onChange = {onChange} value = {username}></input>\r\n      <button onClick = {login} disabled ={isDisabled || isPending}>{ isPending ? \"...\":\"Login\"}</button>\r\n    </label>\r\n    </div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Login;","export const fetchCheckSession = () => {\r\n  return fetch('/api/session',  {\r\n    method: 'GET',\r\n  })\r\n  .catch( () => Promise.reject({ error: 'network-error'} ) )\r\n  .then( response => {\r\n    if(response.ok) {\r\n      return response.json();\r\n    }\r\n    return response.json().then( json => Promise.reject(json) );\r\n  });\r\n};\r\n\r\nexport const fetchCreateSession = ({username}) => {\r\n  return fetch('/api/session',  {\r\n    method: 'POST',\r\n    headers: new Headers({\r\n      'content-type': 'application/json',\r\n    }),\r\n    body: JSON.stringify({ username }),\r\n  })\r\n  .catch( () => Promise.reject({ error: 'network-error'} ) )\r\n  .then( response => {\r\n    if(response.ok) {\r\n      return response.json();\r\n    }\r\n    return response.json().then( json => Promise.reject(json) );\r\n  });\r\n};\r\n\r\nexport const fetchGetChat = () => {\r\n  return fetch('/chat',  {\r\n    method: 'GET',\r\n  })\r\n  .catch( () => Promise.reject({ error: 'network-error'} ) )\r\n  .then( response => {\r\n    if(response.ok) {\r\n      return response.json();\r\n    }\r\n    return response.json().then( json => Promise.reject(json) );\r\n  });\r\n};\r\n\r\nexport const fetchSendMessage = ({username,text}) => {\r\n  return fetch('/chat',  {\r\n    method: 'POST',\r\n    headers: new Headers({\r\n      'content-type': 'application/json',\r\n    }),\r\n    body: JSON.stringify({ username,text}),\r\n  })\r\n  .catch( () => Promise.reject({ error: 'network-error'} ) )\r\n  .then( response => {\r\n    if(response.ok) {\r\n      return response.json();\r\n    }\r\n    return response.json().then( json => Promise.reject(json) );\r\n  });\r\n};\r\n\r\nexport const fetchEndSession = () => {\r\n  return fetch('/api/session',  {\r\n    method: 'DELETE',\r\n  })\r\n  .catch( () => Promise.reject({ error: 'network-error'} ) )\r\n  .then( response => {\r\n    if(response.ok) {\r\n      return response.json();\r\n    }\r\n    return response.json().then( json => Promise.reject(json) );\r\n  });\r\n};","const ChatUserList = ({ userList }) => {\r\n  return (\r\n    <div class = \"column left\" >\r\n      <h3 class = \"subtitle\">Users:</h3>\r\n      <ul>\r\n        {Object.values(userList).map( user => (\r\n          <li>\r\n            <div className=\"user\">\r\n            <span className=\"username\">{user.username}</span>\r\n            </div>\r\n          </li> ) ) }\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatUserList;","const ChatMessageList = ({ messageList }) => {\r\n  return (\r\n    <div class = \"column right\">\r\n    <h3 class = \"subtitle\">Messages:</h3>\r\n    <ul>\r\n      {Object.values(messageList).map( message => (\r\n        <li>\r\n          <div className=\"messages\">\r\n            <span className = \"messagetext\">{message.sender}:{message.text}</span>\r\n            <p>{message.timestamp}</p>\r\n          </div>\r\n      </li> ) ) }\r\n    </ul>\r\n    </div>\r\n  );\r\n};\r\n  \r\nexport default ChatMessageList;","import { useState} from 'react';\r\nimport {fetchSendMessage} from './services';\r\n\r\nconst ChatOutgoing = ({username,renderChat,setMessageList}) => {\r\n  \r\n  const [text, setText] = useState('');\r\n  const [isGreyedout, setisGreyedout] = useState(true);\r\n  const [isLoading, setisLoading] = useState(false);\r\n  const [statusmsg, setstatusmsg] = useState('');\r\n\r\n  const onChange = (e) => {\r\n    setstatusmsg('');\r\n    setText(e.target.value);\r\n    setisGreyedout(!e.target.value);\r\n  };\r\n    \r\n  const sendmessage= ()=> {\r\n    setisLoading(true);\r\n    fetchSendMessage({username ,text})\r\n    .then( chatList => {\r\n      setMessageList(chatList.messageList)\r\n      setText('');\r\n      setisGreyedout(true);\r\n      setstatusmsg('');\r\n      setisLoading(false);\r\n      renderChat({setMessageList});    \r\n    })\r\n    .catch( err => {\r\n      setText('');\r\n      setisGreyedout(true);\r\n      setstatusmsg(err.error);\r\n      setisLoading(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div> \r\n      { statusmsg && <div className=\"status\">{statusmsg}</div>}\r\n      <div className = \"send-form\">\r\n      <label>\r\n        Send Message:\r\n        <input disabled={isLoading} onChange={onChange} value={text} />\r\n      </label>\r\n      <button onClick={sendmessage} disabled={isGreyedout || isLoading} >{ isLoading ? \"...\" : \"Send\"}</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n  \r\nexport default ChatOutgoing;","import { useEffect, useState } from 'react';\r\nimport { fetchGetChat} from './services';\r\nimport ChatUserList from './ChatUserList';\r\nimport ChatMessageList from './ChatMessageList';\r\nimport ChatOutgoing from './ChatOutgoing';\r\n\r\nconst ShowStuff = ({ username }) => {\r\n\r\n  const [userList, setUserList] = useState('');\r\n  const [messageList, setMessageList] = useState('');\r\n  const [status, setStatus] = useState('');\r\n\r\n  useEffect(() => {\r\n    renderChat({setMessageList});\r\n    const intervalId = setInterval(() => {\r\n      renderChat({setMessageList});\r\n    }, 5000);\r\n    return function cleanup() {\r\n      clearInterval(intervalId);\r\n    };\r\n  },[]);\r\n  \r\n  const renderChat = ({setMessageList}) => {\r\n    fetchGetChat()\r\n    .then((chatList)=>{\r\n      setUserList(chatList.userList)\r\n      setMessageList(chatList.messageList)\r\n    })\r\n    .catch((err) => {\r\n      setStatus(err.error);\r\n  });\r\n}\r\n\r\nconst usercontent   = <ChatUserList userList = {userList}/>;\r\nconst messagecontent = <ChatMessageList messageList = {messageList}/>;\r\nconst outgoingcontent = <ChatOutgoing username = {username} renderChat={renderChat} setMessageList={setMessageList}/>;\r\n\r\n  return (\r\n    <div class = \"display-panel\">\r\n    { status && <div class=\"status\">{status}</div>}\r\n    <div class = \"row\">\r\n    {usercontent}\r\n    {messagecontent}\r\n    </div>\r\n    {outgoingcontent}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowStuff;","\r\nimport './App.css';\r\nimport { useState, useEffect } from 'react';\r\nimport { fetchEndSession, fetchCheckSession } from './services';\r\nimport Nav from './Nav';\r\nimport Login from './Login';\r\nimport ShowStuff from './ShowStuff';\r\n\r\nfunction App() {\r\n  const [userState,setUserState] = useState({ isLoggedIn: false, isPending: true });\r\n  const [userName,setUserName] = useState('');\r\n\r\n  useEffect( () => {\r\n    fetchCheckSession()\r\n    .then( userinfo => {\r\n      setUserState({\r\n        isLoggedIn: true,\r\n        isPending: false,\r\n      });\r\n      setUserName(userinfo.username);\r\n    })\r\n    .catch( () => {\r\n      setUserState({\r\n        isLoggedIn: false,\r\n        isPending: false,\r\n      });\r\n    });\r\n  }, []); \r\n\r\n  const login = function({username}) {\r\n    setUserState({\r\n      isLoggedIn: true,\r\n      isPending: false,\r\n    });\r\n    setUserName(username);\r\n  };\r\n\r\n  if(userState.isPending) {\r\n    return (\r\n      <div className=\"app\">\r\n        Loading...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const logout = function() {\r\n    setUserState({\r\n      ...userState,\r\n      isPending: true,\r\n    });\r\n    fetchEndSession()\r\n    .then( () => {\r\n      setUserState({\r\n        isLoggedIn: false,\r\n        isPending: false,\r\n      });\r\n    })\r\n    .catch( () => {\r\n      setUserState({\r\n        ...userState,\r\n        isPending: false,\r\n      });\r\n    });\r\n  };\r\n\r\n  let content;\r\n  if(userState.isLoggedIn) {\r\n    content = <ShowStuff username={userName}/>;\r\n  } \r\n  else {\r\n    content = <Login onLogin={login}/>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n    <h2 className = \"title\">Chat Room</h2>\r\n    <Nav user={userState} onLogout={logout}/>\r\n     {content}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}